○使い方
一層目のファイル群は本番環境用で、実際のデータを受け取り、実際に注文を行う。適当に突っ込んだだけなので動作未保証。

simulator以下のファイル群は、log/log.txtに記録されている過去(直近2日分くらい）のデータを元にAgentの動作をシミュレートする。利益は単純に買値・売値の差で計算、売買価格は3秒後の平均価格±MARGIN(0.0001~0.0003)で約定されると仮定している。
こちらは一応動作保証済み。とりあえずこっちをいじってみて、損益が正になるように頑張ってみてください。

(その他設定など)
・実行に際してはsudoをつけて管理者権限で実行することが必要。これはkeyboardライブラリを使っているためで動作中ESCを押すと一時停止できるが、必要なければコメントアウトすればよい。
・trader.py末尾あたりのself.drawer.sleep()やself.waitをいじれば動作速度を変えられる。
・リアルタイムデータでテストしたい際は、本番環境用のmanagerのsendOrderをコピペして適当にいじれば注文を行うことなくテストできる。
・log/log.txtの各行のデータは(終値, 平均値, 数量, 高値, 安値)で、3秒ごとのもの。
・history以下のデータはbitflyerのデータではないが、zaifから取得した過去の1分ごとの約2年分の取引データが入っている。
1ファイルあたり100,000件、形式は(取引量, 平均値, 最高値, 最安値, 終値, 始値)。

○構成について
bitflyerBotプログラムは、以下のファイルで構成されている。

 -lib.py
 -agent.py
 -manager.py
 -trader.py
 -exec.py

これらさえあればとりあえず動くはず。以下各ファイルの説明。


lib.Const: 
クラス間で共通の定数を定義している。

 -ACT_ASK, ACT_BID, ACT_STAY: それぞれ買いアクション, 売りアクション, 何もしないを表す。


agent(例: BollingerAgent): 
価格の推移を受け取ってアクションを起こすかどうかを決め、trader.Traderに伝える。
基本的にいじるのはこのクラスだけでよい。テンプレはagent_templateを参照。

 -reset(): 注文がリジェクトされた時などに呼び出される。基本はself.state = STATE_STAYのみでよい。
 -tick():	価格を元に何らかの指標を計算する。数回に一回(tick()の呼び出しはデフォルトで3秒ごと、10回ごと
 					にすれば30秒に一回)decide()を呼び出し、Traderにアクションを返す。
 -decide(): アクションを起こすかどうかを決定する。現在買い/売りポジションなのか、ノーポジションなのかなどで
 						挙動を変える必要がある。具体的には、

							STATE_STAY -> 売買時にACT_ASK(or BID)を発行し、STATE_ASK(or BID)に移行する。
							STATE_ASK(or BID) -> 利確 or 損切りのタイミングでACT_ASK(or BID)を発行し、
																	 STATE_STAYに戻る。

						という流れになる。


manager.Manager: 
APIのラッパー。注文など本番環境とのやり取りを担当する。

 -tick(): 定期的に呼び出すことで、より詳細な値動きやロスカットが発生したかの状況を取得できる。
          ロスカットは現在未実装。前回呼ばれた時点からの平均価格と取引数量を返す。
 
 -getLastPrice(): 現在の終値を返す。
 -getInventory(): 残高を返す。
 -sendOrder(action, amount): アクションと数量を渡し, 成行注文で注文を発行する。
                             指値は未実装。


trader.Trader: 
agentのアクションを受け取り、注文量などを計算してManagerに渡すなど、トレードを管理する役割を担う。
self.waitごとにtickを実行する。
 -tick(): まずManager.tick()を呼び出して平均価格や数量の情報を受けとり、それをそのままagentに渡して、
 					代わりにアクションを受け取る。売買アクションを受け取った際には、残高を元に発注数量を計算して
 					ManagerのsendOrder()を呼び出し、注文を行う。

 					
bitflyer.bitflyerAPI:
Managerで使っている以外にも様々なリクエストができる。


exec:
パラメータを渡して実行するためのファイル。
